use crate::{types::{SpaceObject, Ship, Vec2, SpaceShape}, util::generate_random_id};

pub fn create_new_so() -> SpaceObject {
    
   let new_so = SpaceObject {
    messageType: 0,
    viewport: Vec2 { x: 0.0, y: 0.0 },
    viewportScale: 1.0,
    sessionId: "".to_string(),
    acceleration: Vec2 { x: 0.0, y: 0.0 },
    ammo: 1000,
    angleDegree: -90.0,
    angularVelocity: 0.0,
    armedDelay: 500,
    batteryLevel: 500.0,
    batteryCapacity: 500,
    booster: 2,
    bounceCount: 0,
    canonCoolDown: 0,
    canonCoolDownSpeed: 1.4,
    canonHeatAddedPerShot: 1.7,
    canonOverHeat: false,
    colliding: false,
    collidingWith: Vec::new(),
    color: "#90d".to_string(),
    damage: 5,
    deadFrameCount: 0,
    didHit: false,
    enginePower: 0.2,
    framesSinceLastServerUpdate: 0,
    framesSinceLastShot: 0,
    health: 100,
    startHealth: 100,
    hitRadius: 60.0,
    inverseFireRate: 6,
    isDead: false,
    isLocal: false,
    isPlaying: false,
    killedByName: "".to_string(),
    kills: Vec::new(),
    killCount: 0,
    mass: 1,
    missileDamage: 10,
    missileSpeed: 20,
    motivationLevel: 100,
    motivatorBroken: false,
    name: "".to_string(),
    id: generate_random_id().to_string(),
    obliterated: false,
    online: false,
    photonColor: "#f00".to_string(),
    position: Vec2 { x: 0.0, y: 0.0 },
    serverVersion: "".to_string(),
    shape: SpaceShape::SmallShip,
    shotBlowFrame: 16,
    shotsInFlight: Vec::new(),
    shotsInFlightNew: Vec::new(),
    shotsFiredThisFrame: false,
    shotsPerFrame: 1,
    size: Vec2 { x: 50.0, y: 50.0 },
    steeringPower: 1.2,
    velocity: Vec2 { x: 0.0, y: 0.0 },
    ownerName: "".to_string(),
    lastDamagedByName: "".to_string(),
    joinedGame: "".to_string(),
    lastMessage: "".to_string(),
    readyToPlay: false,
    isHost: false,
    ping: false,
    pingResponse: false,
    pingId: "".to_string(),
    hops: 0,
    ttl: 0,
    rtt: 0,
    worldSize: Vec2 { x: 0.0, y: 0.0 },
    cameraPosition: Vec2 { x: 0.0, y: 0.0 },
    cameraVelocity: Vec2 { x: 0.0, y: 0.0 },
    viewFramePosition: Vec2 { x: 0.0, y: 0.0 },
    thrustFlames: Vec::new(),
    ship: Ship {
      name: "".to_string(),
      level: 0,
      userId: "".to_string(),
      shipVariant: 0,
      id: "".to_string(),
      experience: 0,
    },
    moonType: 0,
    };

 return new_so   
}